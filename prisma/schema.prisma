// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String
  emailVerfied Boolean
  image        String?
  created_at   DateTime    @default(now())
  video        Video[]
  notebookId   String?     @db.ObjectId
  chat         SyncroChat?
  Nootbook     Nootbook[]
  setting      Setting?
}

model Nootbook {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  notes  Note[]
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Note {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  tag        String
  tags       String[]
  notes      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Nootbook   Nootbook? @relation(fields: [nootbookId], references: [id])
  nootbookId String?   @db.ObjectId
}

model Setting {
  id                String          @id @default(auto()) @map("_id") @db.ObjectId
  user              User            @relation(fields: [userId], references: [id])
  userId            String          @unique @db.ObjectId
  nootbook          NootbookSetting @relation(fields: [nootbookSettingId], references: [id])
  chat              ChatSetting     @relation(fields: [chatSettingId], references: [id])
  nootbookSettingId String          @db.ObjectId
  chatSettingId     String          @db.ObjectId
}

model NootbookSetting {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  NoteSharable Boolean
  Setting      Setting[]
}

model ChatSetting {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  showOnline Boolean
  Setting    Setting[]
}

// model

model Video {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
}

model SyncroChat {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @unique @db.ObjectId
  SyncroMessage   SyncroMessage? @relation(fields: [syncroMessageId], references: [id])
  syncroMessageId String?        @db.ObjectId
}

model SyncroMessage {
  id   String       @id @default(auto()) @map("_id") @db.ObjectId
  chat SyncroChat[]
  role Role
}

enum Role {
  USER
  AI
}
